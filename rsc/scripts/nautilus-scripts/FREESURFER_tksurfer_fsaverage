#!/bin/bash
# tksurfer wrapper for Nautilus.

# INSTALL:
# mkdir -p ~/.gnome2/nautilus-scripts
# cp "script.sh" ~/.gnome2/nautilus-scripts/
# chmod +x ~/.gnome2/nautilus-scripts/"script.sh"

# Written by Andreas Heckel
# University of Heidelberg
# heckelandreas@googlemail.com
# https://github.com/ahheckel
# 02/26/2013

tmpfile=/tmp/$(basename $0)_$$

if [ x"$flatpatch" = "x" ] ; then flatpatch=0 ; fi
if [ x"$subject" = "x" ] ; then subject=fsaverage ; fi

FREESURFER_HOME=/usr/local/freesurfer
source $FREESURFER_HOME/SetUpFreeSurfer.sh

# add tcl-scripting commands
echo "set gaLinkedVars(redrawlockflag) 1" > /tmp/$$tmp.tcl
echo "SendLinkedVarGroup redrawlock" >> /tmp/$$tmp.tcl
echo "set gaLinkedVars(ignorezeroesinhistogramflag) 1" >> /tmp/$$tmp.tcl
echo "SendLinkedVarGroup overlay" >> /tmp/$$tmp.tcl
if [ $flatpatch -eq 1 ] ; then
  echo "scale_brain 0.75" >> /tmp/$$tmp.tcl
fi

# parse arguments
vollist_lh=""   ; vollist_rh=""
surflist_lh=""  ; surflist_rh=""
overlist_lh=""  ; overlist_rh=""
annotlist_lh="" ; annotlist_rh=""
labels_lh=""    ; labels_rh=""
lastfile=""
sigmap=0
for i in $NAUTILUS_SCRIPT_SELECTED_FILE_PATHS ; do
  
  niigz=$(echo $i | grep "\.nii.gz$" | wc -l)
  nii=$(echo $i | grep "\.nii$" | wc -l)
  mgh=$(echo $i | grep "\.mgh$" | wc -l)
  mgz=$(echo $i | grep "\.mgz$" | wc -l)
  
  label=$(echo $i | grep "\.label$" | wc -l)  
  patch=$(echo $i | grep "\.patch\." | wc -l)  
  annot=$(echo $i | grep "\.annot$" | wc -l)
  
  sig=$(echo $(basename $i) | grep "sig\.mgh$" | wc -l)
  F=$(echo $(basename $i) | grep "^F\.mgh$" | wc -l)
  gamma=$(echo $(basename $i) | grep "^gamma\.mgh$" | wc -l)
  gammavar=$(echo $(basename $i) | grep "^gammavar\.mgh$" | wc -l)
  cnr=$(echo $(basename $i) | grep "^cnr\.mgh$" | wc -l)
  
  if [ $mgz -eq 0 ] ; then
    mri_info $i > $tmpfile  
    type=$(cat $tmpfile | grep type: | head -n1 | cut -d : -f 2)  
    isscalar=$(cat $tmpfile | grep dimensions | cut -d : -f 2- | grep "x 1 x 1" | wc -l)
    rm $tmpfile
  else
    type=XXX
    isscalar=0
  fi
  
  # left or right hemisphere ?
  lh=0 ; rh=0
  lh="$(echo $(basename $i) | grep "\.lh\." | wc -l )"
  rh="$(echo $(basename $i) | grep "\.rh\." | wc -l )"
  if [ $lh -eq 0 ] ; then lh="$(echo $(basename $i) | grep "^lh\." | wc -l )" ; fi
  if [ $rh -eq 0 ] ; then rh="$(echo $(basename $i) | grep "^rh\." | wc -l )" ; fi
  _dir="$i"
  while [ $lh -eq 0 -a $rh -eq 0 ] ; do
    _dir=$(dirname $_dir) ; if [ "$_dir" = "$(dirname $_dir)" ] ; then break ; fi
    _dirname=$(basename $_dir)
    _hemi="$(basename $_dirname)"
    lh=$(echo $_hemi | grep "^lh\."  | wc -l)
    rh=$(echo $_hemi | grep "^rh\."  | wc -l)
    if [ $lh -eq 0 ] ; then lh=$(echo $_hemi | grep "\.lh\." | wc -l) ; fi
    if [ $rh -eq 0 ] ; then rh=$(echo $_hemi | grep "\.rh\." | wc -l) ; fi
    if [ $lh -eq 0 ] ; then lh=$(echo $_hemi | grep "\-lh\-" | wc -l) ; fi
    if [ $rh -eq 0 ] ; then rh=$(echo $_hemi | grep "\-rh\-" | wc -l) ; fi
    #zenity --info --text="$_dir"
  done
  
  # check
  #zenity --info --text="$rh $lh"
  
  if [ $sig -eq 1 -o $F -eq 1 -o $gamma -eq 1 -o $gammavar -eq 1 -o $cnr -eq 1 ] ; then # file is a statistical map...
    sigmap=1
    if [ $lh -eq 1 ] ; then # ...of the left hemi.
      overlist_lh=$overlist_lh" -overlay $i -fminmax P_VAL_MIN P_VAL_MAX"
    elif [ $rh -eq 1 ] ; then # ...of the right hemi.
      overlist_rh=$overlist_rh" -overlay $i -fminmax P_VAL_MIN P_VAL_MAX"
    fi
  elif [ $type = "MGH" -a $isscalar -eq 1 ] ; then # file is (probably) a scalar
    if [ $lh -eq 1 ] ; then # ...of the left hemi.
      overlist_lh=$overlist_lh" -overlay $i"
    elif [ $rh -eq 1 ] ; then # ...of the right hemi.
      overlist_rh=$overlist_rh" -overlay $i"
    fi  
  fi
  
  if [ $label -eq 1 ] ; then # file is a label...
    echo "labl_load $i" >> /tmp/$$tmp.tcl # tcl-script: load label
  fi
  
  if [ $patch -eq 1 ] ; then # file is a patch...
    patchSel="-patch $i"
  fi
  
  lastfile=$i
done # end for loop

# define annotations (only if no labels selected)
if [ $(cat /tmp/$$tmp.tcl | grep labl_load | wc -l) -gt 0 ] ; then
  labelsunder=""
else
  labelsunder="-labels-under"
  annot_lh="-annotation $SUBJECTS_DIR/${subject}/label/lh.aparc.a2009s.annot $labelsunder"
  annot_rh="-annotation $SUBJECTS_DIR/${subject}/label/rh.aparc.a2009s.annot $labelsunder"
fi

# define commando
if [ $lh -eq 1 ] ; then
  if [ $flatpatch -eq 1 ] ; then flatpatchBrain="-patch $SUBJECTS_DIR/${subject}/surf/lh.cortex.patch.flat" ; else flatpatchBrain="" ; fi
  #opts="$patchBrain $patchSel  -gray $annot_lh $overlist_lh -colscalebarflag 1 -colscaletext 1 -title $lastfile -tcl"
  #zenity --info --text="$opts"
  cmd="tksurfer ${subject} lh inflated $flatpatchBrain $patchSel -gray $annot_lh $overlist_lh -colscalebarflag 1 -colscaletext 1 -title $lastfile -tcl /tmp/$$tmp.tcl"
elif [ $rh -eq 1 ] ; then
  if [ $flatpatch -eq 1 ] ; then flatpatchBrain="-patch $SUBJECTS_DIR/${subject}/surf/rh.cortex.patch.flat" ; else flatpatchBrain="" ; fi
  cmd="tksurfer ${subject} rh inflated $flatpatchBrain $patchSel -gray $annot_rh $overlist_rh -colscalebarflag 1 -colscaletext 1 -title $lastfile -tcl /tmp/$$tmp.tcl"
fi

# execute in subshell
if [ $sigmap -eq 1 ] ; then
  xterm -e "\
  echo \"Choose (or enter) a significance threshold:\" ;\
  echo -e \" a. p=0.050\n b. p=0.025\n c. p=0.010\n d. p=0.005\n\" ;\
  read -p \> s ;\
  echo \"------------------------------\" ;\
  if   [ \$s = a ] ; then logP1=1.3010 ; logP2=2  ;\
  elif [ \$s = b ] ; then logP1=1.6021 ; logP2=3  ;\
  elif [ \$s = c ] ; then logP1=2.0000 ; logP2=3  ;\
  elif [ \$s = d ] ; then logP1=2.3010 ; logP2=3  ;\
  else logP1=\$(echo \"l(\$s)/l(10)*-1\"|bc -l) ; logP2=\$(echo \"\$logP1+1\"|bc -l) ;\
  fi ;\
  echo \"p_min = \$logP1\" ;\
  echo \"p_max = \$logP2\" ;\
  echo \"------------------------------\" ;\
  echo \"------------------------------\" ;\
  cmd=\$(echo \"$cmd\" | sed \"s|P_VAL_MIN|\$logP1|g\" | sed \"s|P_VAL_MAX|\$logP2|g\") ;\
  echo \$cmd ;\
  echo \"------------------------------\" ;\
  echo \"------------------------------\" ;\
  \$cmd ; rm /tmp/$$tmp.tcl"
else
  xterm -e "$cmd ; rm /tmp/$$tmp.tcl"
fi
